//in this i put all resources (videos and articles and playlists .....)



// each cmd needs a stdin (input) and returns an output (to stdout)
   
    infile                                             outfile
as stdin for cmd1                                 as stdout for cmd2            
       |                        PIPE                        ↑
       |           |---------------------------|            |
       ↓             |                       |              |
      cmd1   -->    end[1]       ↔       end[0]   -->     cmd2           
                     |                       |
            cmd1   |---------------------------|  end[0]
           output                             reads end[1]
         is written                          and sends cmd1
          to end[1]                          output to cmd2
       (end[1] becomes                      (end[0] becomes 
        cmd1 stdout)                           cmd2 stdin)
        
        
        
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
what is pid_t ? 
      The pid_t data type represents process IDs. You can get the process ID of a process by calling getpid. The function getppid returns the process ID of the parent of the current process (this is also known as the parent process ID). Your program should include the header files `unistd.h' and `sys/types.h' to use these functions.

----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
|------------------------------------------------------|
|dup2(int newfd, int oldfd);                           |
|dup2 = duplicate a file discriptor with a another one.|
|-----------------------------------------------------------------|
|execve() executes the program referred to by pathname.This       |
|causes the program that is currently being run by the calling    |
|process to be replaced with a new program, with newly initialized|
|stack, heap, and (initialized and uninitialized) data segments.  |
|-----------------------------------------------------------------|
|# child_process(f1, cmd1);					  |					         
|// add protection if dup2() < 0				  |				            
|// dup2 close stdin, f1 becomes the new stdin                    |
|dup2(f1, STDIN_FILENO); // we want f1 to be execve() input       |
								  |___								                
|dup2(end[1], STDOUT_FILENO); // we want end[1] to be execve() stdout |
|close(end[0]) # --> always close the end of the pipe you don't use,  |
|                   as long as the pipe is open, the other end will   |
|                    be waiting for some kind of input and will not   |
|                   be able to finish its process    	              |
|close(f1)  							      |						               
|// execve function for each possible path (see below)                |
|exit(EXIT_FAILURE);			      	    	              |
|_____________________________________________________________________|
|So processes are organized in a hierarchy, with: 		      |
|								      |								              
|parent processes that create child processes,			      |_____________________________________________
|child processes that are created by their parent process and can in turn create child processes of their own.|
For example, when we input a command into the shell like ls, the shell creates a child process whose job it is|
|to execute the ls program. If the shell executed the ls program directly without first creating a child,     |
|the shell process would be overwritten by the ls program and we wouldn’t be able to continue using our shell…|
|___________________________________________________________________________________________ _________________|
|Memory Duplicated but Not Shared																			 
|As we’ve seen, a child process is an exact copy of its parent process. When a child is created, it is identical to its parent in every way.|________
| It has the same code, the same open file descriptors, the same data stored in memory, etc. But the fact that this memory is identical does not mean|
|it is shared between the two processes. If the parent process changes the value of one of its variables after creating the child, the child process |
|will not see any change when it reads the same variable.____________________________________________________________________________________________|
|_______________________________________________________|
|
|
|
|
|
|
